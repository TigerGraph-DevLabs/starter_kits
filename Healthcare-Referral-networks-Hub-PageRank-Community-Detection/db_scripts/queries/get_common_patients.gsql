CREATE QUERY get_common_patients(VERTEX<Prescriber> prescriber1, 
  VERTEX<Prescriber> prescriber2) FOR GRAPH MyGraph { 
/*
    Get the Patients that two Prescribers have in common

    Sample inputs:
    prescriber1: pre6 | pre30 | pre13
    prescriber2: pre6 | pre30 | pre13

    Starting from "prescriber1",
    (1) Mark the connected Claim vertices as visited.
    (2) Mark Patient vertices connected to the Claim vertices as visited.
    Prescriber -(<submitted_by)- Claim -(associated>)- Patient
    Starting from "prescriber2",
    (1) Mark the connected Claim vertices as visited.
    (2) Find all Patients connected to Claims that has been visited.
    Prescriber -(<submitted_by)- Claim -(associated>)- Patient
*/

    OrAccum @visited;
    SetAccum<EDGE> @@edge_set;

    pre1 =  {prescriber1};
    pre2 =  {prescriber2};

    /* Step 1 – Start graph Traversal from first prescriber to find all
    associated claims. Use visited flag to remember claims visited. */
    claims1 = SELECT t
        FROM pre1:s -(<submitted_by:e)- Claim:t
        ACCUM t.@visited += TRUE;

    // Step 2 – For those claims, find all the linked patients.
    patients1 = SELECT t
        FROM claims1:s -(associated>:e)- Patient:t
        ACCUM t.@visited += TRUE;

    // Step 3 - Start graph traversal from second prescriber to find all claims
    claims2 = SELECT t
        FROM pre2:s -(<submitted_by:e)- Claim:t
        ACCUM t.@visited += TRUE;

    // Step 4 – Find common patients  by starting from claims in Step 3
    common_patients = SELECT t
        FROM claims2:s -(associated>:e)- Patient:t
        WHERE t.@visited == TRUE;
    PRINT common_patients;

    /* Step 5 – From common patients find all claims that have been visited
    in earlier steps. Collect the edges so they can be printed. */
    claims = SELECT t
        FROM common_patients:s -(<associated:e)- Claim:t
        WHERE t.@visited == TRUE
        ACCUM @@edge_set += e;
    PRINT claims;

    /* Step 6 – From claims find associated prescribers. Collect and print
    edges (claims – prescribers) and prescribers. */
    pres = SELECT t
        FROM claims:s -(submitted_by>:e)- Prescriber:t
        ACCUM @@edge_set += e;

    PRINT pres;
    PRINT @@edge_set;
}