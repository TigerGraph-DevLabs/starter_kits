CREATE QUERY get_joint_prescribers(VERTEX<Prescriber> input_prescriber)
  FOR GRAPH MyGraph { 
/*
    Get Prescribers who have treated the same patients of a given Prescriber

    Sample inputs:
    input_prescriber: pre6 | pre30 | pre13

    Starting with an "input_prescriber",
    (1) Get the connected claims, accumulate the edges, and mark the claims as visited
    (2) Get the patients connected to claims and accumulate the edges
    (3) Get the claims connected to the patients that have not been visited and accumulate the edges
    (4) Get the prescribers connected to the claims and accumulate the edges
    (5) Display the prescribers and edges
    Prescriber -(<submitted_by)- Claim -(associated>)- Patient -(<associated)-
      Claim -(submitted_by>)- Prescriber
*/

    ListAccum<EDGE> @@edge_list; // list will have all edges traversed
    OrAccum<BOOL> @visited;

    start = {input_prescriber};

    claims = SELECT t // select connected claims
        FROM start:s-(<submitted_by:e)-:t
        ACCUM @@edge_list += e
        POST-ACCUM t.@visited = TRUE; // mark the selected claims as visited

    patients = SELECT t // select connected patients
        FROM claims:s-(associated>:e)-:t
        ACCUM @@edge_list +=e;

    claims = SELECT t 
        FROM patients:s-(<associated:e)-:t
        WHERE t.@visited == FALSE // select claims not previously visited
        ACCUM @@edge_list +=e;

    prescribers = SELECT t  // select connected prescribers
        FROM claims-(submitted_by>:e)-:t
        ACCUM @@edge_list +=e;

    PRINT prescribers, @@edge_list;
}