CREATE QUERY price_prediction(SET<String> input_product_name_price, INT max_iteration, BOOL do_update) FOR GRAPH demo_graph SYNTAX V2
{
  /* 
   With a set of strings as input, in the format of PRODUCT_NAME,NEW_PRICE, 
   recalculate the new price for the connected BOM subgraph.

   Sample input:
    input:STEEL RODS,0.2
    max_iteration: 10
    do_update:false
    
    (1) Parse the input strings and put them in to a vertex set
    FOREACH str IN input_product_name_price
    (2) Traverse from the input vertex set 
    (3) Traverse down to the raw materials, each vertex will only serve as start
    SELECT u FROM start1:o-(usedBy>)- product:u
    (4) Mark them with their maximum depth value
    u.@max_depth += @@depth
    (5) Start from the input vertex set again and reset the depth
    (6) Traverse down to the raw materials again, each vertex will wait 
    until the iteration equals to its maximum depth value stored on it 
    to calculate its new price
    (7) Print the new calculated prices and their associated product vertices
  */

  SumAccum<INT> @@depth = 0;
  MaxAccum<INT> @max_depth = 0;
  OrAccum @visited_1 = FALSE;

  OrAccum @is_start = FALSE;

  MapAccum<STRING, FLOAT> @@result;
  MapAccum<STRING, FLOAT> @mapping;
  MapAccum<STRING, INT>   @amount_map;
  OrAccum @visited = FALSE;
  SumAccum<FLOAT> @new_price;

  MapAccum<VERTEX, DOUBLE> @@input_map;
  SetAccum<VERTEX> @@start_set;

  SetAccum<EDGE> @@display_set;
  SetAccum<VERTEX> @@display_vertex;

  String input_key = "";
  String input_val = "";

  // parse the input strings and put them in to a vertex set
  FOREACH str IN input_product_name_price DO
    GetKeyVal(str, input_key, input_val);
    @@input_map += (to_vertex(input_key, "product") -> str_to_double(input_val));
    @@start_set += to_vertex(input_key, "product");
  END;

  // traverse from the input vertex set 
  start = {@@start_set};

  start1 = SELECT s FROM start:s
           ACCUM s.@is_start = TRUE,
                s.@visited_1 = TRUE,
                s.@visited = TRUE,
                s.@new_price = @@input_map.get(s)
           POST-ACCUM s.price = @@input_map.get(s);

  @@depth = 1;

  // traverse down to the raw materials, each vertex will only serve as start
  // vertex for once, and mark them with their maximum depth value
  WHILE (start1.size() > 0) LIMIT max_iteration DO
    start1 = SELECT u FROM start1:o-(usedBy>)- product:u
             POST-ACCUM 
             // when start product is on the path of other start product
             CASE 
               WHEN u.@is_start == TRUE THEN
                 u.@max_depth += @@depth
             END,
             // if first time visit just pass the depth along
             CASE WHEN u.@visited_1 == FALSE THEN
                u.@visited_1 = TRUE
             // keep the largest depth
             ELSE 
                u.@max_depth += @@depth
             END
        HAVING u.@max_depth == 0;
        @@depth += 1;
  END;

  // start from the input vertex set again
  start2 = SELECT s FROM start:s
           WHERE s.@max_depth == 0;

  // reset the depth
  @@depth = 1;

  // traverse down to the raw materials again, each vertex will wait
  // until the iteration equals to its maximum depth value stored on it 
  // to calculate its new price
  WHILE (start2.size() > 0) LIMIT max_iteration DO
    print @@depth;

    // search first
    start2 = SELECT u FROM start2:o -(usedBy>)- product:u
             WHERE (u.@max_depth == 0 OR u.@max_depth <= @@depth) AND u.@visited == FALSE ;

    // then do the calculation
    start2 = SELECT o FROM start2:o -(reverseUsedBy>:e)- product:u
             ACCUM CASE 
             WHEN u.@visited == TRUE THEN  
              o.@mapping += (e.formula_order->u.@new_price)
             ELSE 
              o.@mapping += (e.formula_order->u.price)
             END
             ,o.@amount_map += (e.formula_order->e.useAmount)
             ,@@display_set += e
             ,@@display_vertex += u
             POST-ACCUM
              // dynamically evaluate the formula string stored as an attribute
              STRING formula = o.formula,
              FOREACH (key,val) IN o.@mapping DO
              // replace the $1 string with the runtime value
              formula = replaceStr(formula,"$"+key,to_string(val*o.@amount_map.get(key)))
            END,
            o.@new_price = evaluate(formula,"double"),

            log(TRUE,o.@new_price, formula, o.formula, o.name, o.@mapping),

            CASE WHEN do_update == TRUE THEN
              o.price = o.@new_price
            END,
            o.@visited = TRUE
    ;

    @@depth += 1;
  END;

  PRINT @@display_set;

  final = {@@display_vertex};

  PRINT final;
}
