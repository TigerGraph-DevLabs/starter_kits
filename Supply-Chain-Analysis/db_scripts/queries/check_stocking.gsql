CREATE QUERY check_stocking_amounts (VERTEX<Product> input, UINT amount) FOR GRAPH demo_graph SYNTAX V2
{
/*
  Get the BOM subgraph and show calculated product, ordering, and in-stock raw material amounts. 
  
  Sample input:
  input:CAR WHEEL SET
  amount:5
  
  Starting from all order history vertices,
  (1) Calculate the ordered amount for finished products
  FROM Start:s-(prodOrder:e)-:t
  (2) Traverse from order history to calculate the amount of raw materials that have been consumed
  t.@consumed_amount += s.@consumed_amount*e.useAmount
  (3) Calculate stock amount if there is a stocking record in the order history
  CASE WHEN t.outdegree("prodStocking") > 0 THEN
    t.@instock_amount = SUM(t.edgeattribute("prodStocking","amount")) - t.@consumed_amount
  (4) Now start from the input product vertex and traverse down to the raw material to see if is there enough raw material in stock
  t.@needed_amount += s.@needed_amount*e.useAmount
  CASE WHEN t.@instock_amount != 0 THEN
    CASE WHEN t.@instock_amount > (t.@needed_amount) THEN
      t.@has_enough_of_material += TRUE
  (5) Print the usedBy edge of the input product
*/
  
  SumAccum<int> @consumed_amount;
  SumAccum<int> @needed_amount;
  SumAccum<int> @instock_amount;

  OrAccum @has_enough_of_material;

  SetAccum<edge> @@display_set;

  // Start from all order history vertexes
  start (ANY) = {p_order.*};

  // calcuate ordered amount for the finished products
  start = SELECT t
          FROM start:s-(prodOrder:e)-:t
          ACCUM t.@consumed_amount += e.amount;

  // traverse down to the raw materials, calculate the amount of raw materials has been comsumed
  while (start.size() > 0) do
    start = SELECT t
            FROM start:s-(reverseUsedBy>:e)-:t
            ACCUM 
                t.@consumed_amount += s.@consumed_amount*e.useAmount
            POST_ACCUM
                // if there is stocking record in the history calculate its stock amount
                CASE WHEN t.outdegree("prodStocking") > 0 THEN
                  t.@instock_amount = SUM(t.edgeattribute("prodStocking","amount")) - t.@consumed_amount 
                END
    ;
  END;

  // start from the input product
  start = {input};
  start = SELECT s
          FROM start:s
          ACCUM
              s.@needed_amount = amount
  ;

  print start;

  // again from the input product traverse down to the raw material, and see 
  // if is there enough raw material in stock
  // @hasEnoughOfMaterial will be true when there is enough
  while (start.size() > 0) do
    start = SELECT t
            FROM start:s-(reverseUsedBy>:e)-:t
            ACCUM
                t.@needed_amount += s.@needed_amount*e.useAmount,
                @@display_set += e
            POST_ACCUM
                CASE WHEN t.@instock_amount != 0 THEN
                    CASE WHEN t.@instock_amount > (t.@needed_amount) THEN
                      t.@has_enough_of_material += TRUE
                    END
                END
    ;

    print start;
  END;

  print @@display_set;
}
