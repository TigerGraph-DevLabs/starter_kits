CREATE QUERY site_product_impact_analysis(SET<VERTEX<Site>> affected_sites, UINT max_depth) FOR GRAPH demo_graph SYNTAX V2
{
  /*
    Start from multiple input affected sites, return the impacted site-product pairs. 

    Sample input:
    affected_sites: site5
    max_depth: 10
    
    Starting with a set of "affected_sites",
    (1) Get the impacted products from the impacted sites
    SELECT p FROM effected_site:s -(produce>:e)- product:p
    (2) From the impacted products get its downsteam products
    SELECT p FROM effected_product:ep -(usedBy>:e)- product:p
    (3) Find the impacted sites from the previous effected_site set 
    WHEN s.@affected_prod.contains(e.itemId) THEN
    // keep the impacted sites that are has deliveted imapcted product that is delivered
    SELECT st FROM effected_site:st -(produce>:e) - product:p
    WHERE COUNT(st.@pair_set INTERSECT p.@pair_set) > 0
    (4) Print the impacted site-product pairs    
  */
  
   TYPEDEF TUPLE <STRING site_name, STRING product_name> Site_Product_Pair;

   SetAccum<Site_Product_Pair> @pair_set;

   // products a site that has been affected
   SetAccum<STRING> @affected_prod;

   // number of iteration
   SumAccum<INT> @@iteration = 0;

   // storing the result for unfinished goods
   SetAccum<EDGE> @@result_set;

   // for pass along the edge info for visualization
   SetAccum<EDGE> @edge_msg_set;

   effected_site = {affected_sites};

   WHILE (effected_site.size() > 0) LIMIT max_depth DO
     // get the impacted products from the impacted sites
     effected_product = SELECT p FROM effected_site:s -(produce>:e)- product:p
                        WHERE @@iteration == 0 or s.@affected_prod.contains(p.name) == true
                        ACCUM p.@pair_set += Site_Product_Pair(s.name, p.name),
                        // we assume all of the products got impacted from the input sites
                          CASE 
                            WHEN @@iteration == 0 THEN
                              s.@affected_prod += p.name,
                              @@result_set += e
                          END;

     // from the impacted products get its downsteam products
     down_stream_prod = SELECT p FROM effected_product:ep -(usedBy>:e)- product:p
                        ACCUM p.@pair_set += ep.@pair_set,
                            p.@edge_msg_set += e;
                            
     // find the impacted sites from the previous effected_site set 
     effected_site = SELECT st FROM effected_site:s -(deliver>:e) - site:st
                     ACCUM 
                       CASE 
                         WHEN s.@affected_prod.contains(e.itemId) THEN
                           st.@pair_set += Site_Product_Pair(s.name,e.itemId),
                           st.@edge_Msg_Set += e
                       END;

     // keep the impacted sites that are has deliveted imapcted product that is delivered
     // from a upstream site, and they also use this produt in producing their product
     effected_site = SELECT st FROM effected_site:st -(produce>:e) - product:p
                     WHERE COUNT(st.@pair_set INTERSECT p.@pair_set) > 0
                     ACCUM 
                       st.@affected_prod += p.name,
                       @@result_set += e,
                       @@result_set += st.@edge_Msg_Set,
                       @@result_set += p.@edge_Msg_Set
                     POST-ACCUM
                       p.@pair_set.clear()
     ;

     @@iteration += 1;
  END;

  print @@result_set;
}
