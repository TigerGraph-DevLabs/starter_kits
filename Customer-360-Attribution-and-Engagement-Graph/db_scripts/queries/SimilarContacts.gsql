CREATE QUERY SimilarContacts(VERTEX<Contact> source_customer,
  SET<STRING> campaign_types, INT top_k = 5) SYNTAX v2 {
/*
  Calculates the Jaccard similarities between a given customer (of type Contact)
  and every other customers (or Contacts) who share similar Campaigns.
  Outputs the top_k Contacts with the highest similarity scores.
  
  SAMPLE INPUT:
      Contact: Sam-Eisenberg
      campaignTypes: Webinar, Demo Signup / Trial
      topK: 5

  This query is more complex than a standard Jaccard similarity algorithm because
  there are 2 hops from a Contact to a Campaign (with CampaignMember in between)
  and because we only count the given types of Campaigns.
  
  Jaccard similarity = intersect_size / (size_A + size_B - intersect_size)
*/
    SumAccum<INT> @intersect_size, @@set_size_A, @set_size_B;
    SumAccum<FLOAT> @similarity;

    A = {source_customer};

    A = SELECT s
        FROM A:s
        ACCUM @@set_size_A += s.outdegree("is_connected_to");

    // From set A (Contact), traverse 'is_connected_to' edges to CampaignMembers
    CampaignMembersSet =
        SELECT t
        FROM A:s -(is_connected_to>:e)- CampaignMember:t;
    PRINT CampaignMembersSet.size();

    // From CampaignMembersSet, traverse 'is_part_of' edges to Campaigns, for all 
    // desired campaign_types (e.g. Webinar, Website Direct, Demo Signup/Trial)
    CampaignSet =
        SELECT t
        FROM CampaignMembersSet:s -(is_part_of>:e)- Campaign:t
        WHERE campaign_types.size() == 0 OR (t.Campaign_Type IN campaign_types);
    PRINT CampaignSet.size();

    // From CampaignSet, traverse reverse_is_part_of edges back to all
    // CampaignMembers
    RevCampaignMembersSet =
        SELECT t
        FROM CampaignSet:s -(reverse_is_part_of>:e)- CampaignMember:t;
    PRINT RevCampaignMembersSet.size();

    // From CampaignMemberSet, traverse 'reverse_is_connected_to' edges back to
    // Contacts, (set B). For each Contact in set B, accumulate the intersection
    // size of the shared Campaigns, and ompute its Jaccard Similarity score as
    // intersection_size / (size_A + size_B - intersection_size)
    B = SELECT t
        FROM RevCampaignMembersSet:s -(reverse_is_connected_to>:e)- Contact:t
        WHERE t != source_customer
        ACCUM t.@intersect_size += 1,
            t.@set_size_B = t.outdegree("is_connected_to")
        POST-ACCUM t.@similarity = t.@intersect_size*1.0/
                            (@@set_size_A + t.@set_size_B - t.@intersect_size)
        ORDER BY t.@similarity DESC
        LIMIT top_k;

    PRINT B[B.FirstName, B.LastName, B.@similarity];
}